
(defwidget bar []
           (centerbox :orientation "h"
                      :class "bar"
                      (workspaces)
                      (window-title)
                      (status)))

(defwidget bottom-bar []
           (centerbox :orientation "h"
                      :class "bar"
                      (music)
                      (subtitles)
                      (talon-state)
                      ))




(deflisten ws-defs :initial "[]"
           `scripts/workspace`)

(deflisten volume :initial 50
           `scripts/volume`)

(deflisten kbd-layout :initial "English (Dvorak)"
           `scripts/kbd`)

(deflisten current-window-title :initial ""
           `scripts/current-window`)

(defwidget workspaces []
           (box :class "workspaces"
                :orientation "h"
                :space-evenly true
                :halign "start"
                :spacing 2
                (for ws in ws-defs
                     (workspace-item :ws ws))))

(defwidget workspace-item [ws]
           (eventbox :cursor "pointer"
                     (button :onclick "i3-msg workspace number ${ws.num}"
                             :class "ws-button ${ws.class}"
                             (box
                              :space-evenly false
                              (box :orientation "v"
                                   :valign "start"
                                   (label :class "ws-label" :text "${ws.num}"))
                              (box :orientation "h"
                                   (for icon in {ws.icons}
                                        (label :class "app-label" :text "${icon}"))))
                             )))

(defwidget window-title []
           (box
            (label :text "${current-window-title}")))

(defwidget status []
           (box :orientation "h"
                :halign "end"
                :space-evenly false
                (kbd)
                (sound)
                (stats)
                (clock)
                (my-systray)
                (power)
                ))

(defwidget stats []
           (box
            :class "item-container"
            (box
             :orientation "v"
             :space-evenly true
             :valign "center"
             (small-progress :label-text "cpu" :progress-value {EWW_CPU.avg})
             (small-progress :label-text "ram" :progress-value {EWW_RAM.used_mem_perc}))))

(defwidget small-progress [label-text progress-value]
           (box
            :class "small-progress"
            :space-evenly false
            :tooltip "${round(progress-value, 0)}%"
            (label
             :class "small-progress-label"
             :text label-text)
            (box
             :orientation "v"
             :valign "center"
             (progress
              :value progress-value
              :orientation "h"))))

(defwidget my-systray []
           (box
            :class "item-container"
            (systray
             :spacing 5)))

(defvar power false)
(defvar power-confirm false)
(defvar sleep-confirm false)
(defvar reboot-confirm false)

(defwidget power []
           (box
            :class "item-container"
            (eventbox
             :onhover "eww update power=true"
             :onhoverlost "eww update power=false power-confirm=false sleep-confirm=false reboot-confirm=false"
             (box
              :orientation "h"
              :space-evenly false
              (confirm-button :icon ""
                              :name "power"
                              :tooltip "Power off"
                              :confirm-var power-confirm
                              :exec "systemctl poweroff")
              (revealer
               :transition "slideleft"
               :reveal power
               (box :orientation "h"
                    :space-evenly false
                    (confirm-button :icon ""
                                    :name "reboot"
                                    :tooltip "Reboot"
                                    :confirm-var reboot-confirm
                                    :exec "systemctl reboot")
                    (confirm-button :icon "󰒲"
                                    :name "sleep"
                                    :tooltip "Sleep"
                                    :confirm-var sleep-confirm
                                    :exec "systemctl suspend")))))))

(defwidget confirm-button [icon name confirm-var exec tooltip]
           (box
            :orientation "h"
            :space-evenly false
            (revealer :transition "slideright"
                      :reveal confirm-var
                      (eventbox :cursor "pointer"
                                (button :class "power-button confirm"
                                        :onclick exec
                                        :tooltip "Confirm ${tooltip}"
                                        "")))
            (eventbox :cursor "pointer"
                      (button :class "power-button"
                              :onclick `eww update ${name}-confirm=true`
                              :tooltip tooltip
                              icon))))

(defwidget kbd []
           (box :orientation "h"
                :class "item-container"
                :spacing 10
                :space-evenly false
                (label :class "stat-label" :text "")
                (label :text "${kbd-layout}")))

(defwidget sound []
           (eventbox :onscroll `echo {} | sed -e 's/up/+5%/g' -e 's/down/-5%/g' | xargs pactl set-sink-volume @DEFAULT_SINK@`
                     :cursor "pointer"
                     (box :orientation "h"
                          :class "item-container"
                          :spacing 10
                          :space-evenly false
                          :tooltip "${volume}%"
                          (label :class "stat-label" :text "")
                          (box :orientation "v"
                               :valign "center"
                               (progress :value {volume}
                                         :orientation "h")))))

(defwidget clock []
           (box :orientation "h"
                :class "item-container clock"
                :spacing 10
                :space-evenly true
                :halign "center"
                (label :text {formattime (EWW_TIME, "%Y-%m-%d %H:%M")})))

(deflisten currently-playing :initial "false"
           `scripts/currently-playing`)

(defwidget music []
           (box
            :orientation "h"
            :halign "start"
            :class "music-container"
            :visible {currently-playing != "false"}
            (centerbox
             :orientation "v"
             :valign "center"
             :space-evenly false
             (box
              :orientation "h"
              :halign "start"
              :space-evenly false
              :class "music-row"
              (label
               :class "music-text"
               :text "${currently-playing.artist} - ${currently-playing.title}"))
             (box)
             (box
              :orientation "h"
              :halign "start"
              :space-evenly false
              :class "music-row"
              (label
               :class "music-text"
               :text "${currently-playing.album} (${currently-playing.year})")))))

(defvar subtitle "kernel smash")
(defwidget subtitles []
           (box
            :class "subtitle"
            :orientation "v"
            :valign "end"
            (label :text "kernel smash")))

(defvar listen false)
(defvar warn false)
(defvar cancel false)
(defvar repeat false)
(defwidget talon-state []
           (box
            :orientation "h"
            :halign "end"
            :class "item-container"
            (talon-icon
             :icon ""
             :off-class "talon-black"
             :on-class "talon-green"
             :is-on repeat)
            (talon-icon
             :icon ""
             :off-class "talon-black"
             :on-class "talon-red"
             :is-on cancel)
            (talon-icon
             :icon ""
             :off-class "talon-black"
             :on-class "talon-yellow"
             :is-on warn)
            (talon-icon
             :icon ""
             :off-class "talon-red"
             :on-class "talon-green"
             :is-on listen)))

(defwidget talon-icon [icon off-class on-class is-on]
           (label
            :class "talon-icon ${is-on ? on-class: off-class}"
            :text icon))

(defwindow bar
           :monitor 0
           :windowtype "dock"
           :geometry (geometry :x "0%"
                               :y "0%"
                               :width "100%"
                               :height "35px"
                               :anchor "top center")
           :reserve (struts :side "top" :distance "4%")
           (bar))


(defwindow bottom-bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "50px"
                      :anchor "bottom center")
  :reserve (struts :side "bottom" :distance "5%")
  (bottom-bar))
