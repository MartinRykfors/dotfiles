
(defwidget bar []
           (centerbox :orientation "h"
                      (workspaces)
                      (window-title)
                      (status)))


(deflisten ws-defs :initial "[]"
           `scripts/workspace`)

(deflisten volume :initial 50
           `scripts/volume`)

(deflisten kbd-layout :initial "English (Dvorak)"
           `scripts/kbd`)

(deflisten current-window-title :initial ""
           `scripts/current-window`)

(defwidget workspaces []
           (box :class "workspaces"
                :orientation "h"
                :space-evenly true
                :halign "start"
                :spacing 2
                (for entry in ws-defs
                     (eventbox :cursor "pointer"
                               (button :onclick "i3-msg workspace number ${entry.index}"
                                       :class {entry.class}
                                       "${entry.index}"
                                       )))))

(defwidget window-title []
           (label :text "${current-window-title}"))

(defwidget status []
           (box :orientation "h"
                :halign "end"
                :space-evenly false
                (kbd)
                (divider)
                (sound)
                (divider)
                (stat :label-text ""
                      :progress-value {EWW_CPU.avg})
                (divider)
                (stat :label-text ""
                      :progress-value {EWW_RAM.used_mem_perc})
                (divider)
                (clock)
                (divider)
                (power)
                ))


(defwidget divider []
           (box :orientation "h"
                :class "divider"))

(defwidget divider-dashed []
           (box :orientation "h"
                :class "divider-dashed"))

(defvar power false)
(defvar power-confirm false)
(defvar sleep-confirm false)
(defvar reboot-confirm false)

(defwidget power []
           (eventbox :onhover "eww update power=true"
                     :onhoverlost "eww update power=false power-confirm=false sleep-confirm=false reboot-confirm=false"
                     (box
                      :orientation "h"
                      :space-evenly false
                      (confirm-button :icon ""
                                      :name "power"
                                      :confirm-var power-confirm)
                      (revealer :transition "slideleft"
                                :reveal power
                                (box :orientation "h"
                                     :space-evenly false
                                     (divider)
                                     (confirm-button :icon ""
                                                     :name "reboot"
                                                     :confirm-var reboot-confirm)
                                     (divider)
                                     (confirm-button :icon "󰒲"
                                                     :name "sleep"
                                                     :confirm-var sleep-confirm))))))

(defwidget confirm-button [icon name confirm-var]
           (box :orientation "h"
                :space-evenly false
                (revealer :transition "slideright"
                          :reveal confirm-var
                          (eventbox :cursor "pointer"
                                    (button :class "confirm-button"
                                                           ; :onclick "systemctl poweroff"
                                            "")))
                          (eventbox :cursor "pointer"
                                    (button :class "power-button"
                                            :onclick `eww update ${name}-confirm=true`
                                            icon))))

(defwidget kbd []
           (eventbox :cursor "pointer"
                     (box :orientation "h"
                          :class "stat-container"
                          :spacing 10
                          :space-evenly false
                          (label :class "stat-label" :text "")
                          (label :text "${kbd-layout}"))))
(defwidget sound []
           (eventbox :onscroll `echo {} | sed -e 's/up/+5%/g' -e 's/down/-5%/g' | xargs pactl set-sink-volume @DEFAULT_SINK@`
                     :cursor "pointer"
                     (box :orientation "h"
                          :class "stat-container"
                          :spacing 10
                          :space-evenly false
                          :tooltip "${volume}%"
                          (label :class "stat-label" :text "")
                          (box :orientation "v"
                               :valign "center"
                               (progress :value {volume}
                                         :orientation "h")))))

(defwidget clock []
           (box :orientation "h"
                :class "clock-container"
                :spacing 10
                :space-evenly true
                :halign "center"
                (label :text {formattime (EWW_TIME, "%Y-%m-%d %H:%M")})))

(defwidget stat [label-text progress-value]
           (box :orientation "h"
                :class "stat-container"
                :spacing 10
                :space-evenly false
                (label :class "stat-label" :text label-text)
                (box :orientation "v"
                     :valign "center"
                     (progress :value progress-value
                               :orientation "h")
                     )))

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "35px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "4%")
  (bar))
